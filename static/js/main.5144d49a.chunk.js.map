{"version":3,"sources":["components/Radar/index.js","App.js","serviceWorker.js","index.js"],"names":["Radar","size","points","pointerX","pointerY","canvasSize","window","innerWidth","maxRadius","degreesToCanvas","degree","parseInt","fixThreshold","height","width","map","stroke","strokeWidth","tension","lineCap","x","y","radius","apiUrl","process","REACT_APP_API_URL","App","handleScan","data","a","state","qrData","setState","showQRScanner","axios","res","peer","signal","offer","handleStartMeasure","isConnectedToDevice","send","JSON","stringify","startMeasure","timerCount","initialTimer","interval","setInterval","handleStopMeasure","clearInterval","addEventListener","removeEventListener","handleShowQRScanner","Peer","trickle","on","err","console","log","post","answer","this","isConnectedToHUD","parse","toString","handleConnectToDevice","initiator","getServerAnswer","dataReceived","setTimeout","event","beta","gamma","parseFloat","toPrecision","dataToSend","orientation","radarSize","Math","min","innerHeight","getPointer","handleError","error","sendOrientation","delay","onError","onScan","style","value","includeMargin","Button","onClick","Input","placeholder","onChange","e","target","React","Component","Boolean","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5144d49a.chunk.js","sourcesContent":["import React from 'react';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\nexport default function Radar({size, points, pointerX, pointerY}) {\n  const canvasSize = size || window.innerWidth;\n  const maxRadius = canvasSize/2;\n\n  function fixThreshold(degree) {\n    if (degree > 90) return 90;\n    if (degree < -90) return -90;\n    return degree;\n  }\n\n  function degreesToCanvas(degree) {\n    return parseInt(fixThreshold(degree) * (canvasSize / 180) + (canvasSize / 2))\n  } \n\n  return (<Stage\n    height={canvasSize}\n    width={canvasSize}\n  >\n    <Layer>\n      <Line\n        points={points.map(degreesToCanvas)}\n        stroke=\"#df4b26\"\n        strokeWidth={5}\n        tension={0.5}\n        lineCap=\"round\"\n      />\n      <Circle x={degreesToCanvas(pointerX)} y={degreesToCanvas(pointerY)} stroke=\"green\" radius={maxRadius/25} />\n      <Circle x={canvasSize/2} y={canvasSize/2} stroke=\"black\" radius={maxRadius} />\n      <Circle x={canvasSize/2} y={canvasSize/2} stroke=\"black\" radius={maxRadius/4*3} />\n      <Circle x={canvasSize/2} y={canvasSize/2} stroke=\"black\" radius={maxRadius/2} />\n      <Circle x={canvasSize/2} y={canvasSize/2} stroke=\"black\" radius={maxRadius/4} />\n      <Circle x={canvasSize/2} y={canvasSize/2} stroke=\"black\" radius={1} />\n    </Layer>\n  </Stage>)\n}\n","import React from 'react';\nimport Peer from 'simple-peer';\nimport { Button, Input } from 'semantic-ui-react';\nimport QrReader from 'react-qr-reader'\nimport QRCode from 'qrcode.react';\nimport axios from 'axios';\n\nimport Radar from './components/Radar';\n\nconst apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      answer: '',\n      offer: '',\n      data: '',\n      dataToSend: '',\n      qrData: '',\n      orientation: {\n        x: 0,\n        y: 0\n      },\n      points: [],\n      timerCount: 0,\n      showQRScanner: false,\n      isConnectedToDevice: false,\n      isConnectedToHUD: false,\n    }\n\n    this.radarSize = Math.min(window.innerHeight, window.innerWidth);\n\n    this.getPointer = event => {\n      const { beta, gamma } = event;\n      const x = parseFloat(gamma).toPrecision(5);\n      const y = parseFloat(beta).toPrecision(5);\n      if (x && y) {\n        this.setState({\n          orientation: {\n            x,\n            y\n          }\n        })\n      }\n    }\n\n    this.handleError = err => {\n      console.error(err)\n    }\n\n    this.sendOrientation = event => {\n      const { beta, gamma } = event;\n      this.peer.send([gamma, beta]);\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('deviceorientation', this.getPointer, true);\n  }\n\n  componentDidUpdate() {\n    if(this.state.isConnectedToHUD) {\n      this.peer.send(JSON.stringify({\n        orientation: this.state.orientation,\n        points: this.state.points,\n        timerCount: this.state.timerCount\n      }))\n    }\n  }\n\n  handleScan = async data => {\n    if (!this.state.qrData && data) {\n      this.setState({\n        qrData: data,\n        showQRScanner: false\n      })\n      const res = await axios(data);\n      this.peer.signal(res.data.offer);\n    }\n  }\n\n  handleStartMeasure = () => {\n    if (this.state.isConnectedToDevice) {\n      this.peer.send(JSON.stringify({\n        startMeasure: true\n      }))\n    }\n    if (parseInt(this.state.timerCount) > 0) {\n      const initialTimer = this.state.timerCount;\n      const interval = setInterval(() => {\n        this.setState({ timerCount: this.state.timerCount - 1 })\n        if (this.state.timerCount <= 0) {\n          this.handleStopMeasure();\n          this.setState({ timerCount: initialTimer })\n          clearInterval(interval);\n        }\n      }, 1000);\n    }\n    window.addEventListener('deviceorientation', this.startMeasure, true);\n  }\n\n  handleStopMeasure = () => {\n    window.removeEventListener('deviceorientation', this.startMeasure, true);\n    this.setState({ startMeasure: false })\n  }\n\n  handleShowQRScanner = () => {\n    this.peer = new Peer({\n      trickle: false\n    });\n\n    this.peer.on('error', err => console.log('error', err))\n\n    this.peer.on('signal', async data => {\n      console.log('SIGNAL', JSON.stringify(data))\n      const res = await axios.post(this.state.qrData, data);\n      this.setState({ answer: res.data })\n    })\n\n    this.peer.on('connect', () => {\n      console.log('CONNECT');\n      this.setState({isConnectedToHUD: true});\n    })\n\n    this.peer.on('data', data => {\n      const dataJson = JSON.parse(data.toString());\n      if(dataJson.startMeasure) {\n        this.handleStartMeasure();\n      }\n    })\n\n    this.setState({ showQRScanner: true });\n  }\n\n  handleConnectToDevice = () => {\n    this.peer = new Peer({\n      initiator: true,\n      trickle: false\n    });\n\n    this.peer.on('error', err => console.log('error', err))\n\n    this.peer.on('signal', async data => {\n      console.log('SIGNAL', JSON.stringify(data))\n      const res = await axios.post(apiUrl, data);\n      console.log('SIGNAL', JSON.stringify(res));\n      this.setState({ offer: res.data });\n      this.getServerAnswer();\n    })\n\n    this.peer.on('connect', () => {\n      console.log('CONNECT')\n      this.setState({ isConnectedToDevice: true })\n    })\n\n    this.peer.on('data', dataReceived => {\n      this.setState(JSON.parse(dataReceived.toString()));\n    });\n  }\n\n  getServerAnswer = async () => {\n    console.log('Getting');\n    const res = await axios(this.state.offer);\n    res.data && res.data.answer ?\n      this.peer.signal(res.data.answer) :\n      setTimeout(() => this.getServerAnswer(), 1000);\n  }\n\n  startMeasure = event => {\n    const { beta, gamma } = event;\n    const x = parseFloat(gamma).toPrecision(5);\n    const y = parseFloat(beta).toPrecision(5);\n    if (x && y) {\n      this.setState({\n        points: [...this.state.points, parseInt(x), parseInt(y)]\n      })\n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        { this.state.showQRScanner && <QrReader\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          style={{ width: '100%' }}\n          /> }\n        <Radar\n          pointerX={this.state.orientation.x}\n          pointerY={this.state.orientation.y}\n          points={this.state.points}\n          size={this.radarSize} />\n        {this.state.offer && <QRCode value={this.state.offer} includeMargin/>}\n        <Button onClick={this.handleStartMeasure}>Start measure</Button>\n        <Button onClick={this.handleStopMeasure}>Stop measure</Button>\n        <Button onClick={() => this.setState({ points: [] })}>Clear measure</Button>\n        <Button onClick={this.handleShowQRScanner}>Connect with screen</Button>\n        <Button onClick={this.handleConnectToDevice}>Connect with device</Button>\n        <Input placeholder='Time in seconds' onChange={e => this.setState({ timerCount: e.target.value })} />\n        {this.state.timerCount} <br />\n        {this.state.orientation.x} <br />\n        {this.state.orientation.y} <br />\n        {this.state.qrData} <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootEl\n);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    ReactDOM.render(\n      <NextApp />,\n      rootEl\n    )\n  })\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}